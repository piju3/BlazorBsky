@page "/post/{AtUri}"
@page "/profile/{Handle}/post/{PostId}";
@using BlazorSky.Data
@using FishyFlip.Models
@using System.Text
@inject NavigationManager Navigation
<h3>Post</h3>
@if (Post == null)
{
    <p>@msg</p>
}
else
{
    <BlazorSky.Shared.PostComponent Value="@Post"/>
    <hr />
    <div style="margin-left:1em">
        @if (Replies!.Count == 0)
        {
            <text>No replies</text>
        }
        else
        {
            <PostTimeline Posts="Replies"></PostTimeline>
        }
    </div>
}
@code{
    

    [Parameter]
    public string? AtUri { get; set; }

    [Parameter]
    public string? Handle { get; set; }
    [Parameter]
    public string? PostId { get; set; }

    PostView? Post;
    List<IEnumerable<PostView>>? Replies;

    string? msg;

    protected override async Task OnParametersSetAsync() {
        AtUri ??= $"at://{Handle}/app.bsky.feed.post/{PostId}";
        if (AtUri == null) {
            msg = "No URL";
            return;
        }
        try
        {
            msg = "Loading...";
            var data = await AppData.Client.Feed.GetPostThreadAsync(new ATUri(AtUri)); //'at://briantylercohen.bsky.social/app.bsky.feed.post/bafyreiexmr236g77xtgbunmsc5zqcdw6jy3gcjntnk3wp3uhgl3u63vsoy'
            if (!data.IsT0) {
                msg = "Error: " + data.AsT1.Detail?.Message;
                return;
            }

            ThreadViewPost? thread = data.AsT0?.Thread as ThreadViewPost;
            Post = thread?.Post;
            Replies = Flatten(thread);
        } catch (Exception e)
        {
            //Logger.Error
            msg = "Exception: " + e.ToString();
        }
    }


    static List<IEnumerable<PostView>> Flatten(ThreadViewPost? thread)
    {
        var L1Replies = (thread?.Replies?.OfType<ThreadViewPost>())?.OrderByDescending(r => r.Post!.LikeCount).AsEnumerable() ?? [];

        return L1Replies.Select(
            L1Reply =>
            IterateBy(L1Reply, t => t.Replies?.OfType<ThreadViewPost>().MaxBy(r => r.Post!.LikeCount))
            .Select(t => t.Post!)
        ).ToList();
    }

    static IEnumerable<T> IterateBy<T>(T First, Func<T, T?> Next)
    {
        T? current = First;
        while (current != null)
        {
            yield return current;
            current = Next(current);
        }
    }
}
